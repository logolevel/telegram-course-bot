require('dotenv').config();
const { Telegraf, session } = require('telegraf');
const express = require('express');

const bot = new Telegraf(process.env.BOT_TOKEN);
const app = express();

const video1 = 'BAACAgIAAxkBAAMDaBzV1qo0HMIY0_kM48OIZ1bRZeEAAiKCAAJuhuhIzHUqNWbJSW42BA';
const video2 = 'BAACAgIAAxkBAAMEaBzZK1T4cQ4e--QkxlBdVXQxOckAAg-DAAJuhuhI3zbkNVXIC482BA';
const video3 = 'BAACAgIAAxkBAAMFaBzZkbsXNKEyOy_-d7-nknnitaYAApeDAAJuhuhIRwGRAAFJfFTKNgQ';

const adminID = '373532023';
const adminUserName = '@dzaviriukha';

bot.use(session());

bot.use((ctx, next) => {
	if (!ctx.session) ctx.session = {};
	return next();
});

// –≠—Ç–∞–ø 1
bot.start(async (ctx) => {
	ctx.session.step = 1;

	const videoMsg = await ctx.replyWithVideo(video1, { caption: '–≠—Ç–∞–ø 1: –ü–æ—Å–º–æ—Ç—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∏–¥–µ–æ' });
	ctx.session.step1VideoId = videoMsg.message_id;

	await new Promise(resolve => setTimeout(resolve, 10000));

	const buttonMsg = await ctx.reply('–ö–æ–≥–¥–∞ –ø–æ—Å–º–æ—Ç—Ä–∏—à—å ‚Äî –Ω–∞–∂–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–Ω–æ–ø–∫—É ¬´–î–∞–ª–µ–µ¬ª', {
		reply_markup: {
			inline_keyboard: [[{ text: '–î–∞–ª–µ–µ', callback_data: 'step1_done' }]],
		},
	});
	ctx.session.step1ButtonId = buttonMsg.message_id;
});

// –≠—Ç–∞–ø 2
bot.action('step1_done', async (ctx) => {
	try {
		if (ctx.session.step1VideoId) await ctx.deleteMessage(ctx.session.step1VideoId);
		if (ctx.session.step1ButtonId) await ctx.deleteMessage(ctx.session.step1ButtonId);
	} catch (e) {
		console.warn('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–∞–ø–∞ 1:', e.message);
	}

	ctx.session.step = 2;

	const videoMsg = await ctx.replyWithVideo(video2, {
		caption: '–≠—Ç–∞–ø 2: –ü–æ—Å–º–æ—Ç—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Ç–æ—Ä–æ–µ –≤–∏–¥–µ–æ',
	});
	ctx.session.step2VideoId = videoMsg.message_id;

	const buttonMsg = await ctx.reply('–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ ‚Äî –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å–≤–æ–µ–≥–æ —Ä–∏—Å—É–Ω–∫–∞', {
		reply_markup: {
			inline_keyboard: [[{ text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: 'send_photo' }]],
		},
	});
	ctx.session.step2ButtonId = buttonMsg.message_id;
});

// –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ
bot.action('send_photo', async (ctx) => {
	const msg = await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∑ —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚¨áÔ∏è üìé');
	ctx.session.sendPhotoInstructionId = msg.message_id;
});

function getUserContactInfo(user) {
	const userId = user.id;
	const username = user.username;

	let caption = '';
	let replyMarkup;

	if (username) {
		caption = `–§–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username}`;
		replyMarkup = {
			inline_keyboard: [[
				{ text: `–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å @${username}`, url: `https://t.me/${username}` }
			]]
		};
	} else {
		caption = `–§–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ username\ntg://user?id=${userId}`;
	}

	return { caption, reply_markup: replyMarkup };
}

// –§–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.on('photo', async (ctx) => {
	if (ctx.session.step === 2) {
		const photo = ctx.message.photo.pop();
		const { caption, reply_markup } = getUserContactInfo(ctx.from);

		try {
			await ctx.telegram.sendPhoto(adminID, photo.file_id, {
				caption,
				reply_markup,
			});

			if (ctx.from.username) {
				await ctx.reply('–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ. –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–≥–æ –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ ‚úâÔ∏è');
			} else {
				await ctx.reply(`–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ, –Ω–æ —É –Ω–∞—Å –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–∞–º –ø–µ—Ä–≤—ã–º–∏ üòï\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é: ${adminUserName}`);
			}
		} catch (err) {
			console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ:', err);
			await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∞–¥—Ä–µ—Å–∞—Ç—É.');
			return;
		}

		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é "–ü—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ"
		if (ctx.session.sendPhotoInstructionId) {
			try {
				await ctx.deleteMessage(ctx.session.sendPhotoInstructionId);
				ctx.session.sendPhotoInstructionId = null;
			} catch (e) {
				console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫ —Ñ–æ—Ç–æ:', e.message);
			}
		}

		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–∞–ø–∞ 2
		try {
			if (ctx.session.step2VideoId) await ctx.deleteMessage(ctx.session.step2VideoId);
			if (ctx.session.step2ButtonId) await ctx.deleteMessage(ctx.session.step2ButtonId);
		} catch (e) {
			console.warn('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–∞–ø–∞ 2:', e.message);
		}

		ctx.session.step = 3;

		// –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–∏–¥–µ–æ 3 —ç—Ç–∞–ø–∞
		const buttonMsg = await ctx.reply('–§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥! –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ –∑–∞–∫–ª—é—á–∞—é—â–µ–≥–æ —ç—Ç–∞–ø–∞ üé¨', {
			reply_markup: {
				inline_keyboard: [[{ text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ', callback_data: 'show_final_video' }]]
			}
		});
		ctx.session.showFinalVideoButtonId = buttonMsg.message_id;
	}
});

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–µ–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
bot.action('show_final_video', async (ctx) => {
	if (ctx.session.showFinalVideoButtonId) {
		try {
			await ctx.deleteMessage(ctx.session.showFinalVideoButtonId);
		} catch (e) {
			console.warn('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ:', e.message);
		}
	}

	const videoMsg = await ctx.replyWithVideo(video3, {
		caption: '–≠—Ç–∞–ø 3: –§–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ',
	});
	ctx.session.step3VideoId = videoMsg.message_id;

	const buttonMsg = await ctx.reply('–ï—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –±–æ–ª—å—à–µ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Ç—É—Ç: https://example.com', {
		reply_markup: {
			inline_keyboard: [[
				{ text: '–ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data: 'finish_course' }
			]]
		}
	});
	ctx.session.step3ButtonId = buttonMsg.message_id;
});

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
bot.action('finish_course', async (ctx) => {
	if (ctx.session.step3VideoId) {
		await ctx.deleteMessage(ctx.session.step3VideoId).catch((e) => console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ —ç—Ç–∞–ø–∞ 3:', e.message));
	}
	if (ctx.session.step3ButtonId) {
		await ctx.deleteMessage(ctx.session.step3ButtonId).catch((e) => console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É —ç—Ç–∞–ø–∞ 3:', e.message));
	}

	const finishMsg = await ctx.reply('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å –∫—É—Ä—Å–æ–º! üéâ', {
		reply_markup: {
			inline_keyboard: [[{ text: '–ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ', callback_data: 'restart' }]]
		}
	});
	ctx.session.finishMessageId = finishMsg.message_id;
});

// –†–µ—Å—Ç–∞—Ä—Ç –∫—É—Ä—Å–∞
bot.action('restart', async (ctx) => {
	await ctx.answerCbQuery();

	if (ctx.session.finishMessageId) {
		await ctx.deleteMessage(ctx.session.finishMessageId).catch((e) => console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.message));
		ctx.session.finishMessageId = null;
	}

	ctx.session.step = 1;

	const videoMsg = await ctx.replyWithVideo(video1, { caption: '–≠—Ç–∞–ø 1: –ü–æ—Å–º–æ—Ç—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∏–¥–µ–æ' });
	ctx.session.step1VideoId = videoMsg.message_id;

	const buttonMsg = await ctx.reply('–ö–æ–≥–¥–∞ –ø–æ—Å–º–æ—Ç—Ä–∏—à—å ‚Äî –Ω–∞–∂–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–Ω–æ–ø–∫—É ¬´–î–∞–ª–µ–µ¬ª', {
		reply_markup: {
			inline_keyboard: [[{ text: '–î–∞–ª–µ–µ', callback_data: 'step1_done' }]],
		},
	});
	ctx.session.step1ButtonId = buttonMsg.message_id;
});

// Webhook
app.use(bot.webhookCallback('/secret-path'));
bot.telegram.setWebhook(`${process.env.BOT_URL}/secret-path`);

app.listen(process.env.PORT || 3000, () => {
	console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway');
});
