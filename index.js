require("dotenv").config();
const { Telegraf, session } = require("telegraf");
const db = require("./db");
const fs = require('fs');
const path = require('path');
const axios = require("axios");

const express = require("express");

const bot = new Telegraf(process.env.BOT_TOKEN);
const app = express();

const video1 =
  "BAACAgIAAxkBAAMDaBzV1qo0HMIY0_kM48OIZ1bRZeEAAiKCAAJuhuhIzHUqNWbJSW42BA";
const video2 =
  "BAACAgIAAxkBAAMEaBzZK1T4cQ4e--QkxlBdVXQxOckAAg-DAAJuhuhI3zbkNVXIC482BA";
const video3 =
  "BAACAgIAAxkBAAMFaBzZkbsXNKEyOy_-d7-nknnitaYAApeDAAJuhuhIRwGRAAFJfFTKNgQ";

const video1TimeOut = 10000;
const video2TimeOut = 26000;
const video3TimeOut = 33000;

const adminID = "373532023";
const adminUserName = "@dzaviriukha";

db.init().catch(console.error);

bot.use(session());

bot.use((ctx, next) => {
  if (!ctx.session) ctx.session = {};
  return next();
});

async function sendStep1(ctx) {
  ctx.session.step = 1;

  const videoMsg = await ctx.replyWithVideo(video1, {
    caption: "–≠—Ç–∞–ø 1: –ü–æ—Å–º–æ—Ç—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —ç—Ç–æ –≤–∏–¥–µ–æ",
  });
  ctx.session.step1VideoId = videoMsg.message_id;

  await new Promise((resolve) => setTimeout(resolve, video1TimeOut));

  const buttonMsg = await ctx.reply(
    "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å –ø—Ä–æ—Å–º–æ—Ç—Ä ‚Äî –≤–∑–≥–ª—è–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ ¬´–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–Ω–∞—Å—Ç–∞—Å–∏–∏¬ª",
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–Ω–∞—Å—Ç–∞—Å–∏–∏", callback_data: "step1_done" }],
        ],
      },
    }
  );
  ctx.session.step1ButtonId = buttonMsg.message_id;
}

// –≠—Ç–∞–ø 1
bot.start(async (ctx) => {
  await sendStep1(ctx);

  // Update db
  await db.upsertUser(ctx.from.id, ctx.from.username);
  await db.updateStep(ctx.from.id, 1);
});

// –≠—Ç–∞–ø 2
bot.action("step1_done", async (ctx) => {
  try {
    if (ctx.session.step1VideoId)
      await ctx.deleteMessage(ctx.session.step1VideoId);
    if (ctx.session.step1ButtonId)
      await ctx.deleteMessage(ctx.session.step1ButtonId);
  } catch (e) {
    console.warn("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–∞–ø–∞ 1:", e.message);
  }

  ctx.session.step = 2;

  // Update db
  await db.updateStep(ctx.from.id, 2);

  const videoMsg = await ctx.replyWithVideo(video2, {
    caption: "–≠—Ç–∞–ø 2: –≠—Ç–æ –≤–∏–¥–µ–æ —Å –ù–∞—Å—Ç–µ–π",
  });
  ctx.session.step2VideoId = videoMsg.message_id;

  await new Promise((resolve) => setTimeout(resolve, video2TimeOut));

  const buttonMsg = await ctx.reply(
    "–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ ‚Äî –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å–≤–æ–µ–≥–æ —Ä–∏—Å—É–Ω–∫–∞",
    {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å–≤–æ–µ–≥–æ —Ä–∏—Å—É–Ω–∫–∞",
              callback_data: "send_photo",
            },
          ],
        ],
      },
    }
  );
  ctx.session.step2ButtonId = buttonMsg.message_id;
});

// –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ
bot.action("send_photo", async (ctx) => {
  const msg = await ctx.reply(
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∑ —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚¨áÔ∏è üìé"
  );
  ctx.session.sendPhotoInstructionId = msg.message_id;
});

function getUserContactInfo(user) {
  const userId = user.id;
  const username = user.username;

  let caption = "";
  let replyMarkup;

  if (username) {
    caption = `–†–∏—Å—É–Ω–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username}`;
    replyMarkup = {
      inline_keyboard: [
        [
          {
            text: `–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å @${username}`,
            url: `https://t.me/${username}`,
          },
        ],
      ],
    };
  } else {
    caption = `–†–∏—Å—É–Ω–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ username\ntg://user?id=${userId}, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è, —Ç.–∫. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª username`;
  }

  return { caption, reply_markup: replyMarkup };
}

// –§–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.on("photo", async (ctx) => {
  if (ctx.session.step === 2) {
    const photo = ctx.message.photo.pop();
    const { caption, reply_markup } = getUserContactInfo(ctx.from);

    try {
      await ctx.telegram.sendPhoto(adminID, photo.file_id, {
        caption,
        reply_markup,
      });

      if (ctx.from.username) {
        await ctx.reply(
          "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ. –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–≥–æ –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ ‚úâÔ∏è"
        );
      } else {
        await ctx.reply(
          `–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ, –Ω–æ —É –Ω–∞—Å –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–∞–º –ø–µ—Ä–≤—ã–º–∏ üòï\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é: ${adminUserName}`
        );
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ:", err);
      await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∞–¥—Ä–µ—Å–∞—Ç—É.");
      return;
    }

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é "–ü—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ"
    if (ctx.session.sendPhotoInstructionId) {
      try {
        await ctx.deleteMessage(ctx.session.sendPhotoInstructionId);
        ctx.session.sendPhotoInstructionId = null;
      } catch (e) {
        console.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫ —Ñ–æ—Ç–æ:", e.message);
      }
    }

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–∞–ø–∞ 2
    try {
      if (ctx.session.step2VideoId)
        await ctx.deleteMessage(ctx.session.step2VideoId);
      if (ctx.session.step2ButtonId)
        await ctx.deleteMessage(ctx.session.step2ButtonId);
    } catch (e) {
      console.warn("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–∞–ø–∞ 2:", e.message);
    }

    ctx.session.step = 3;

    // Update db
    await db.markPhotoSent(ctx.from.id);

    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–∏–¥–µ–æ 3 —ç—Ç–∞–ø–∞
    const buttonMsg = await ctx.reply(
      "–§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥! –ù–∞–∂–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ –∑–∞–∫–ª—é—á–∞—é—â–µ–≥–æ —ç—Ç–∞–ø–∞ üé¨",
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ",
                callback_data: "show_final_video",
              },
            ],
          ],
        },
      }
    );
    ctx.session.showFinalVideoButtonId = buttonMsg.message_id;
  }
});

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–µ–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
bot.action("show_final_video", async (ctx) => {
  if (ctx.session.showFinalVideoButtonId) {
    try {
      await ctx.deleteMessage(ctx.session.showFinalVideoButtonId);
    } catch (e) {
      console.warn(
        "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ:",
        e.message
      );
    }
  }

  const videoMsg = await ctx.replyWithVideo(video3, {
    caption: "–≠—Ç–∞–ø 3: –§–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ",
  });
  ctx.session.step3VideoId = videoMsg.message_id;

  // Update db
  await db.updateStep(ctx.from.id, 3);

  await new Promise((resolve) => setTimeout(resolve, video3TimeOut));

  const buttonMsg = await ctx.reply(
    "–ï—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, —Ç–æ –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Ç—É—Ç: https://example.com",
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data: "finish_course" }],
        ],
      },
    }
  );
  ctx.session.step3ButtonId = buttonMsg.message_id;
});

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
bot.action("finish_course", async (ctx) => {
  if (ctx.session.step3VideoId) {
    await ctx
      .deleteMessage(ctx.session.step3VideoId)
      .catch((e) =>
        console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ —ç—Ç–∞–ø–∞ 3:", e.message)
      );
  }
  if (ctx.session.step3ButtonId) {
    await ctx
      .deleteMessage(ctx.session.step3ButtonId)
      .catch((e) =>
        console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É —ç—Ç–∞–ø–∞ 3:", e.message)
      );
  }

  const finishMsg = await ctx.reply("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å –∫—É—Ä—Å–æ–º! üéâ", {
    reply_markup: {
      inline_keyboard: [[{ text: "–ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data: "restart" }]],
    },
  });
  ctx.session.finishMessageId = finishMsg.message_id;
});

// –†–µ—Å—Ç–∞—Ä—Ç –∫—É—Ä—Å–∞
bot.action("restart", async (ctx) => {
  await ctx.answerCbQuery();

  // Update db
  await db.incrementRestartCount(ctx.from.id);

  if (ctx.session.finishMessageId) {
    await ctx
      .deleteMessage(ctx.session.finishMessageId)
      .catch((e) =>
        console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", e.message)
      );
    ctx.session.finishMessageId = null;
  }

  await ctx.reply("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑–æ–∫");
  await ctx.reply("‚¨áÔ∏è –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ - –º–∞—Ç—å —É—á–µ–Ω—å—è üòÉ ‚¨áÔ∏è");

  await sendStep1(ctx);
});

// –°–ª—É–∂–µ–±–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
bot.on("video", async (ctx) => {
  const video = ctx.message.video;
  const caption = ctx.message.caption?.trim().toLowerCase();
  const durationSeconds = video.duration;
  const durationMs = durationSeconds * 1000;

  if (caption === "add") {
    await ctx.reply(
      `<code>${video.file_id}</code>\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${durationMs} –º—Å`,
      {
        parse_mode: "HTML",
      }
    );
  }
});

bot.command("stats", async (ctx) => {
  const adminId = ctx.from.id.toString();
  if (adminId !== adminID) {
    return ctx.reply("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω");
  }

  const args = ctx.message.text.split(" ");
  const monthArg = args[1]; // –º–æ–∂–µ—Ç –±—ã—Ç—å '2025-05' –∏–ª–∏ undefined
  let periodLabel = "–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è";

  let stats;
  try {
    stats = await db.getStats(monthArg);
    if (monthArg) {
      const [year, month] = monthArg.split("-");
      periodLabel = `–∑–∞ ${month}.${year}`;
    }
  } catch (err) {
    return ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π: /stats YYYY-MM");
  }

  const step1 = parseInt(stats.step1 || 0);
  const step2 = parseInt(stats.step2 || 0);
  const step3 = parseInt(stats.step3 || 0);
  const sentPhotos = parseInt(stats.sent_photos || 0);
  const total = parseInt(stats.total || 0);
  const restarts = parseInt(stats.total_restarts || 0);

  const text =
    `üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ ${periodLabel}:</b>\n\n` +
    `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>${total}</b>\n` +
    `üîÅ –ü–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Å—Ç–∞—Ä—Ç–æ–≤: <b>${restarts}</b>\n\n` +
    `üé¨ –≠—Ç–∞–ø 1: <b>${step1}</b>\n` +
    `üéû –≠—Ç–∞–ø 2: <b>${step2}</b>\n` +
    `üì∑ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: <b>${sentPhotos}</b>\n` +
    `üéØ –≠—Ç–∞–ø 3: <b>${step3}</b>`;

  const chartConfig = {
    type: "bar",
    data: {
      labels: ["–≠—Ç–∞–ø 1", "–≠—Ç–∞–ø 2", "–§–æ—Ç–æ", "–≠—Ç–∞–ø 3"],
      datasets: [
        {
          label: `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (${periodLabel})`,
          data: [step1, step2, sentPhotos, step3],
          backgroundColor: ["#4e79a7", "#f28e2c", "#e15759", "#76b7b2"],
        },
      ],
    },
    options: {
      plugins: {
        title: {
          display: true,
          text: `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${total}`,
          font: { size: 18 },
        },
      },
    },
  };

  const chartUrl = `https://quickchart.io/chart?c=${encodeURIComponent(
    JSON.stringify(chartConfig)
  )}`;

  await ctx.replyWithPhoto(
    { url: chartUrl },
    { caption: `üìà –ì—Ä–∞—Ñ–∏–∫ ${periodLabel}` }
  );
  await ctx.reply(text, { parse_mode: "HTML" });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤ —Ç–æ–º —á–∏—Å–ª–µ –≤–∏–¥–µ–æ, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç)
bot.on("document", async (ctx) => {
  const fileName = ctx.message.document.file_name;

  if (fileName !== "add.mp4") {
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
  const fileId = ctx.message.document.file_id;
  const fileLink = await ctx.telegram.getFileLink(fileId);

  // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
  const localPath = path.join(__dirname, "add.mp4");
  const response = await axios({
    method: "GET",
    url: fileLink.href,
    responseType: "stream",
  });

  const writer = fs.createWriteStream(localPath);
  response.data.pipe(writer);

  // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
  await new Promise((resolve, reject) => {
    writer.on("finish", resolve);
    writer.on("error", reject);
  });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –∫—Ä—É–∂–æ–∫
  const sentMsg = await ctx.replyWithVideoNote({ source: localPath });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º file_id
  if (sentMsg.video_note) {
    await ctx.reply(
      `‚úÖ file_id –≤–∏–¥–µ–æ-–∫—Ä—É–∂–∫–∞: \`${sentMsg.video_note.file_id}\``,
      {
        parse_mode: "Markdown",
      }
    );
  } else {
    await ctx.reply("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫ –Ω–µ –ø–æ–ª—É—á–µ–Ω.");
  }

  // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
  fs.unlinkSync(localPath);
});

// Webhook
app.use(bot.webhookCallback("/secret-path"));
bot.telegram.setWebhook(`${process.env.BOT_URL}/secret-path`);

app.listen(process.env.PORT || 3000, () => {
  console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway");
});
