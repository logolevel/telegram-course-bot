require("dotenv").config();
const { Telegraf, Markup } = require("telegraf");
const { init, trackUserAction, addPhoto, getAllUsers, getTotalUsers, getStageStats, addPhoneNumber, setUserState, getUser } = require("./db");
const db = { init, trackUserAction, addPhoto, getAllUsers, getTotalUsers, getStageStats, addPhoneNumber, setUserState, getUser };
const express = require("express");
const path = require('path');
const fs = require('fs');
const axios = require("axios");

const bot = new Telegraf(process.env.BOT_TOKEN);
const app = express();

app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

const video1 = "BAACAgIAAxkBAAIDJWhEcOGXY7u6d9TsmvHCEkQDD357AAKZcQAC6nYhSlYP-N1iRopuNgQ";
const video2 = "DQACAgIAAxkDAAIDOWhEenF69nK4-Ew81B87dL67afjhAAImcgAC6nYhSik4e7m3MnC4NgQ";
const video2TimeOut = 40000;

const adminUserName = process.env.ADMIN_USERNAME;
const adminIDs = (process.env.ADMIN_ID || "").split(',').map(id => id.trim());

db.init().catch(err => {
  console.error("FATAL: Database initialization failed.", err);
  process.exit(1);
});


const isValidPhoneNumber = (phone) => {
    const regex = /^\+\d{10,15}$/;
    return regex.test(phone);
};

bot.start((ctx) => {
  const userId = ctx.from.id;
  const username = ctx.from.username;
  db.trackUserAction(userId, username, 'pressed_start_at');
  ctx.replyWithHTML(
    `üé® –ü—Ä–∏–≤–µ—Ç!\n\n–ö—Ä—É—Ç–æ, —á—Ç–æ —Ç—ã –∑–¥–µ—Å—å ‚Äî –∑–Ω–∞—á–∏—Ç, —Ç—è–≥–∞ –∫ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤—É —É —Ç–µ–±—è —Ç–æ—á–Ω–æ –µ—Å—Ç—å üòâ\n\n–õ–æ–≤–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫ –∏–∑ –Ω–∞—à–µ–≥–æ –∫—É—Ä—Å–∞ ‚Äî –ø–æ–ø—Ä–æ–±—É–π, –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑–Ω—É—Ç—Ä–∏!\n\n–ê –ø–æ—Ç–æ–º –∑–∞–≥–ª—è–Ω–µ–º –≤ —Ç–≤–æ–π —Ä–∏—Å—É–Ω–æ–∫ –∏ —Å–¥–µ–ª–∞–µ–º —Ä–∞–∑–±–æ—Ä üßê ‚Äî –ø–æ—Ö–≤–∞–ª–∏–º, –ø–æ–¥–º–µ—Ç–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∏ –ø–æ–¥—Å–∫–∞–∂–µ–º, –∫—É–¥–∞ —Ä–∞—Å—Ç–∏ –¥–∞–ª—å—à–µ.`,
    Markup.inlineKeyboard([
      Markup.button.callback("–ì–æ—Ç–æ–≤(–∞)? –ü–æ–µ—Ö–∞–ª–∏! üöÄ", "go_to_video"),
    ])
  );
});

bot.action("go_to_video", (ctx) => {
  const userId = ctx.from.id;
  const username = ctx.from.username;
  db.trackUserAction(userId, username, 'pressed_go_at');
  ctx.answerCbQuery();
  ctx.editMessageReplyMarkup(undefined);
  ctx.replyWithVideo(video1,
    Markup.inlineKeyboard([
      Markup.button.callback("–Ø –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞) —É—Ä–æ–∫", "watched_video_1")
    ])
  );
});

bot.action("watched_video_1", (ctx) => {
  const userId = ctx.from.id;
  const username = ctx.from.username;
  db.trackUserAction(userId, username, 'watched_video_1_at');
  ctx.editMessageReplyMarkup(undefined);
  ctx.answerCbQuery();
  ctx.replyWithVideo(video2).then(() => {
    setTimeout(() => {
      ctx.replyWithHTML(
        `üìé –ß—Ç–æ–±—ã –º—ã —Å–¥–µ–ª–∞–ª–∏ —Ä–∞–∑–±–æ—Ä, –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ —Å–≤–æ–µ–≥–æ —Ä–∏—Å—É–Ω–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É –≤–Ω–∏–∑—É –∏ –≤—ã–±–µ—Ä–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n\n–ñ–¥—ë–º —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É, —á—Ç–æ–±—ã –¥–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! üñº`
      );
    }, video2TimeOut);
  });
});

// MODIFIED: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
bot.on('photo', async (ctx) => {
    const userId = ctx.from.id;
    const username = ctx.from.username;
    const photoFileId = ctx.message.photo[ctx.message.photo.length - 1].file_id;

    await db.trackUserAction(userId, username, 'uploaded_photo_at');
    await db.addPhoto(userId, photoFileId);

    // const mainAdminID = adminIDs[0];
    const mainAdminID = adminIDs[1];
    const caption = username
      ? `–†–∏—Å—É–Ω–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username}`
      : `–†–∏—Å—É–Ω–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${userId}`;
    await ctx.telegram.sendPhoto(mainAdminID, photoFileId, { caption });

    if (username) {
        await ctx.replyWithHTML(
            `–ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–≤–æ–π —Ä–∏—Å—É–Ω–æ–∫ - —Å–ø–∞—Å–∏–±–æ!\n\n–°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π.\n–û–∂–∏–¥–∞–π —Å–æ–æ–±—â–µ–Ω–∏—è üíå`
        );
    } else {
        await ctx.replyWithHTML(
            `–ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–≤–æ–π —Ä–∏—Å—É–Ω–æ–∫ - —Å–ø–∞—Å–∏–±–æ!\n\n–£ –Ω–∞—Å –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–µ—Ä–≤—ã–º–∏, —Ç.–∫. —É —Ç–µ–±—è –Ω–µ —É–∫–∞–∑–∞–Ω username\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å —Ä–∏—Å—É–Ω–æ–∫, —Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–º ${adminUserName} üíå`
        );

        // NEW: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–æ–º–µ—Ä–∞
        await ctx.reply(
            '–ò–ª–∏ –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –º—ã —Å —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π.\n\n–¢—ã –º–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +380981234567',
            Markup.keyboard([
                Markup.button.contactRequest('üì≤ –û—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
            ]).resize()
        );

        // NEW: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞
        await db.setUserState(userId, 'awaiting_phone_number');
    }
});

// NEW: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
bot.on('contact', async (ctx) => {
    const userId = ctx.message.contact.user_id;
    const user = await db.getUser(userId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∂–¥–∞–ª–∏ –Ω–æ–º–µ—Ä –æ—Ç —ç—Ç–æ–≥–æ —é–∑–µ—Ä–∞
    if (!user || user.state !== 'awaiting_phone_number') {
        return;
    }

    const phoneNumber = ctx.message.contact.phone_number;
    const firstName = ctx.message.contact.first_name;

    await db.addPhoneNumber(userId, phoneNumber); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º state

    // const mainAdminID = adminIDs[0];
    const mainAdminID = adminIDs[1];
    if (mainAdminID) {
        await ctx.telegram.sendMessage(mainAdminID, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${firstName} (ID: ${userId}) –ø–æ–¥–µ–ª–∏–ª—Å—è —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.`);
        await ctx.telegram.sendContact(mainAdminID, phoneNumber, firstName);
    }

    await ctx.reply(
        '–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –°–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π',
        Markup.removeKeyboard() // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
    );
});

// NEW: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞
bot.on('text', async (ctx) => {
    const userId = ctx.from.id;
    const user = await db.getUser(userId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –∂–¥–µ–º –Ω–æ–º–µ—Ä –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!user || user.state !== 'awaiting_phone_number') {
        return; // –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    }

    const text = ctx.message.text.trim();

    if (isValidPhoneNumber(text)) {
        // –ù–æ–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
        await db.addPhoneNumber(userId, text); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º state

        // const mainAdminID = adminIDs[0];
        const mainAdminID = adminIDs[1];
        if (mainAdminID) {
            await ctx.telegram.sendMessage(mainAdminID, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: ${userId}) –≤–≤–µ–ª –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é: ${text}`);
        }

        await ctx.reply(
            '–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –°–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π',
            Markup.removeKeyboard()
        );
    } else {
        // –ù–æ–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
        await ctx.reply('–í–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. –ü—Ä–∏–º–µ—Ä: +380981234567. –°–ø–∞—Å–∏–±–æ!');
    }
});


// --- –°–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ Express-—Å–µ—Ä–≤–µ—Ä (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

bot.command('stats', (ctx) => {
    const userId = String(ctx.from.id);
    if (adminIDs.includes(userId)) {
        try {
            const statsUrl = `${process.env.BOT_URL}/stats`;
            ctx.replyWithHTML(
                'üìä <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥.',
                Markup.inlineKeyboard([
                    Markup.button.url('üìà –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', statsUrl)
                ])
            );
        } catch (e) {
            console.error("Failed to create or send stats link:", e);
            ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.");
        }
    } else {
        console.log(`User ${userId} (not an admin) tried to use /stats command.`);
    }
});

app.get("/users", async (req, res) => {
    try {
        const users = await db.getAllUsers();
        res.render('users', { users });
    } catch (error) {
        console.error("Error fetching user list:", error);
        res.status(500).send("Error fetching user list");
    }
});

app.get("/view-photo/:file_id", async (req, res) => {
    try {
        const fileId = req.params.file_id;
        const file = await bot.telegram.getFile(fileId);
        const photoUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;
        res.redirect(photoUrl);
    } catch (error) {
        console.error("Error redirecting to photo:", error);
        res.status(404).send("File not found or link expired.");
    }
});

app.get("/", (req, res) => {
  res.send("Hello! Bot server is running correctly.");
});

app.get("/stats", async (req, res) => {
    try {
        const { month, year } = req.query;
        const totalUsers = await db.getTotalUsers();
        const stageStats = await db.getStageStats(month, year);
        res.render('stats', {
            totalUsers,
            stageStats,
            currentFilter: month && year ? `–∑–∞ ${month}/${year}` : '–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è'
        });
    } catch (error) {
        console.error("Error fetching stats:", error);
        res.status(500).send("Error fetching statistics");
    }
});

bot.on("video", async (ctx) => {
  const video = ctx.message.video;
  const caption = ctx.message.caption?.trim().toLowerCase();
  const durationSeconds = video.duration;
  const durationMs = durationSeconds * 1000;
  if (caption === "add") {
    await ctx.reply(
      `<code>${video.file_id}</code>\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${durationMs} –º—Å`,
      { parse_mode: "HTML" }
    );
  }
});

bot.on("document", async (ctx) => {
  const fileName = ctx.message.document.file_name;
  if (fileName !== "add.mp4") {
    return;
  }
  const fileId = ctx.message.document.file_id;
  const fileLink = await ctx.telegram.getFileLink(fileId);
  const localPath = path.join(__dirname, "add.mp4");
  const response = await axios({
    method: "GET",
    url: fileLink.href,
    responseType: "stream",
  });
  const writer = fs.createWriteStream(localPath);
  response.data.pipe(writer);
  await new Promise((resolve, reject) => {
    writer.on("finish", resolve);
    writer.on("error", reject);
  });
  const sentMsg = await ctx.replyWithVideoNote({ source: localPath });
  if (sentMsg.video_note) {
    await ctx.reply(`‚úÖ file_id –≤–∏–¥–µ–æ-–∫—Ä—É–∂–∫–∞: ${sentMsg.video_note.file_id}`);
    await ctx.reply(`–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${sentMsg.video_note.duration} —Å–µ–∫—É–Ω–¥`);
  } else {
    await ctx.reply("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫ –Ω–µ –ø–æ–ª—É—á–µ–Ω.");
  }
  fs.unlinkSync(localPath);
});

const secretPath = process.env.SECRET_PATH;
app.use(bot.webhookCallback(`/${secretPath}`));
bot.telegram.setWebhook(`${process.env.BOT_URL}/${secretPath}`);

app.listen(process.env.PORT || 3000, () => {
  console.log(`Bot is running on port ${process.env.PORT || 3000}`);
});